---
- name: setup  vprofile
  hosts: localhost
  gather_facts: false
  tasks: 
   - name: import vpc setup variable
     include_vars: vars/vpc-output_vars

   - name: import vprofile setup variable
     include_vars: vars/vprostacksetup
  
   - name: create vprofile ec2 key
     ec2_key:
       name: vprokey
       region: "{{region}}"
  
     register: vprokey_out 
  
   - name: save private key into bastion-host
     copy:
       content: "{{vprokey_out.key.private_key}}"
       dest: ./loginkey-key.pem
       mode: 0600
     when: vprokey_out.changed 
  
  
   - name: Create  sequrity Group for load blancer
     ec2_group:
        name: vproELB-sg
        description: allow port 80from everwhere and all port within bastion-host-sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
     register: vproELBG_out

   - name: Create  sequrity Group for vprofile Stack
     ec2_group:
        name: vproStack-sg
        description: allow port 22from everwhere and all port within bastion-host-sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            security_group: "{{vproELBG_out.group_id}}"
          - proto: tcp
            from_port: 22
            to_port: 22
            security_group: "{{bastionsgid}}"
            vpc_subnet_id: "{{pubsub1id}}"
        register: vproStackSG_out 
   - name: update  sequrity Group for its own SG
     ec2_group:
        name: vproStack-sg
        description: allow port 22from everwhere and all port within bastion-host-sg
        region: "{{region}}"
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            security_group:  "{{vproStackSG_out.group_id}}"


   - name: Creating Nginx web01
     ec2:
       key_name: "vprokey"
       region: "{{region}}"
       instance_type: t2.micro
       image_id: "{{nginx_ami}}"
       wait: yes

       tags:
         Name: "web01"
         Project: vprofile
         Owner: devops team
       exact_count: 1
       count_tag:
         Name: "web01"
         Project: vprofile
         Owner: devops team
      
       security_group: "{{vproStackSG_out.group_id}}"
       vpc_subnet_id: "{{prisub1id}}"
     register: web01_out
       
   - name: Creating Tomcat app01
     ec2:
       key_name: "vprokey"
       region: "{{region}}"
       instance_type: t2.micro
       image_id: "{{tomcat_ami}}"
       wait: yes

       tags:
         Name: "app01"
         Project: vprofile
         Owner: devops team
       exact_count: 1
       count_tag:
         Name: "app01"
         Project: vprofile
         Owner: devops team
      
       security_group: "{{vproStackSG_out.group_id}}"
       vpc_subnet_id: "{{prisub1id}}"
     register: app01_out
          

   - name: Creating memcache mc01
     ec2:
       key_name: "vprokey"
       region: "{{region}}"
       instance_type: t2.micro
       image_id: "{{memcache_ami}}"
       wait: yes

       tags:
         Name: "mc01"
         Project: vprofile
         Owner: devops team
       exact_count: 1
       count_tag:
         Name: "mc01"
         Project: vprofile
         Owner: devops team
      
       security_group: "{{vproStackSG_out.group_id}}"
       vpc_subnet_id: "{{prisub1id}}"
     register: mc01_out
                 

   - name: Creating RabitMQ rmq01
     ec2:
       key_name: "vprokey"
       region: "{{region}}"
       instance_type: t2.micro
       image_id: "{{rmq_ami}}"
       wait: yes

       tags:
         Name: "rmq01"
         Project: vprofile
         Owner: devops team
       exact_count: 1
       count_tag:
         Name: "rmq01"
         Project: vprofile
         Owner: devops team
      
       security_group: "{{vproStackSG_out.group_id}}"
       vpc_subnet_id: "{{prisub1id}}"
     register: rmq01_out
                               

   - name: Creating RabitMQ rmq01
     ec2:
       key_name: "vprokey"
       region: "{{region}}"
       instance_type: t2.micro
       image_id: "{{mysql_ami}}"
       wait: yes

       tags:
         Name: "db01"
         Project: vprofile
         Owner: devops team
       exact_count: 1
       count_tag:
         Name: "db01"
         Project: vprofile
         Owner: devops team
      
       security_group: "{{vproStackSG_out.group_id}}"
       vpc_subnet_id: "{{prisub1id}}"
     register: db01_out
   - debug:
       var: db01_out



#- local_action:
 #   module: ec2_elb_lb
- name: crate load balancer 
  ec2_elb_lb: 
    name: "vprofile-elb"
    region: "{{region}}"
    state: present
    instance_ids:
     - "{{web01_out.tagged_instances[0].id}}"
    purge_instance_ids: true
    security_group: "{{vproELBG_out.group_id}}"
    subnets:
     - "{{pubsub1id}}"
     - "{{pubsub2id}}"
     - "{{pubsub3id}}"
    listeners:
      - protocol: http
        load_balancer_port: 80
        instance_port: 80
      
- name: insert /update Host ip & Name in file provision-stack/group_vars/hostip
  blockinfile:
     path : provison-stack/group_vars/hostsip
     block: |
      web01_ip:  {{web01_out.tagged_instances[0].private_ip}}
      app01_ip:  {{app01_out.tagged_instances[0].private_ip}}
      rmq01_ip:  {{rmq01_out.tagged_instances[0].private_ip}}
      mc01_ip:   {{mc01_out.tagged_instances[0].private_ip}}
      db01_ip:   {{db01_out.tagged_instances[0].private_ip}}
      

- name: copy login key to provision-stack
  copy: 
   src: loginkey-key.pem
   dest: provision-stack/loginkey-key.pem
   mode: '0400'

      
- name: insert /update  Inventory file provision-stack/inventory-vpro
  blockinfile:
     path : provision-stack/inventory-vpro
     block: |
      web01 ansible_host=  {{web01_out.tagged_instances[0].private_ip}}
      app01  ansible_host=  {{app01_out.tagged_instances[0].private_ip}}
      rmq01  ansible_host=   {{rmq01_out.tagged_instances[0].private_ip}}
      mc01  ansible_host=   {{mc01_out.tagged_instances[0].private_ip}}
      db01  ansible_host=  {{db01_out.tagged_instances[0].private_ip}}
      cntl  ansible_host= 127.0.0.1 ansible_connection=local
          [websrvgrp]
          webo1

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl


          [stack_inst:children]
          websrvgrp                 
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp


          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey-key.pem
          #ansible_python_interpreter=/usr/bin/python3